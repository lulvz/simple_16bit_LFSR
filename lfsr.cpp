#include <chrono>
#include <bitset>

#include "lfsr.hpp"

LFSR::LFSR() : seed(0b0000111100001111), originSeed(seed), tap(7) {}

LFSR::LFSR(uint16_t seed, uint16_t tap) : seed(seed), originSeed(seed), tap(tap) {}

uint8_t LFSR::bitAt(uint32_t i){
    return (uint8_t)(this->seed >> i & 1);
}

uint8_t LFSR::step(){
    // bit is a byte that is eiter a 0 or 1 generated by
    // getting the leftmost bit of the seed
    uint8_t bit = (this->seed >> 15) & 1;
    // xor(bit, seed[tap]), seed[tap] counting from the 
    // rightmost bit and starting from 0
    bit = bit ^ this->bitAt(this->tap);
    // move bits of seed 1 to the left and append bit 
    // to the end and return
    this->seed = this->seed << 1 | bit;
    return this->seed;
}

uint32_t LFSR::generate(uint32_t k){
    for(;k!=0;k--){
        this->step();
    }
    return this->seed;
}

// idk if this works :/
uint32_t LFSR::generateRange(uint32_t i, uint32_t j){
    uint16_t gen;
    do {
        gen = this->step();
    } while (!(gen>=i && gen<=j));
    this->seed = gen;
    return gen;
}

std::string LFSR::toString(){
    return std::bitset<16>(this->seed).to_string();
}

void LFSR::resetSeed(){
    this->seed = this->originSeed;
}

void LFSR::setSeed(uint16_t seed){
    this->seed = seed;
    this->originSeed = seed;
}

void LFSR::setTap(uint16_t tap){
    this->tap = tap;
}